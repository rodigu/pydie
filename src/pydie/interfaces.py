from typing import TypedDict, Protocol, Optional
from polars import DataFrame


type SQLTableName = str


type FetcherID = str


class FetcherConfiguration(TypedDict):
    id: FetcherID
    target_table: SQLTableName


type ConverterID = str


class ConverterConfiguration(TypedDict):
    """Converter configurations are generated by fetcher functions, and should _not_ be manually written or injected.

    The only input into the `fetcher-->converter` pipe is at the `fetcher`."""

    id: ConverterID
    target_table: SQLTableName
    data: dict | DataFrame


class EngineConfiguration(TypedDict):
    """# Engine configuration specs

    Configuration specifications used through the data integration process.
    """


class Fetcher(Protocol):
    def __call__(
        self,
        configuration: FetcherConfiguration,
        engine_configuration: EngineConfiguration,
    ) -> ConverterConfiguration: ...


class FetcherFetcherAdaptor(Protocol):
    def __call__(
        self,
        configuration: FetcherConfiguration,
        engine_configuration: EngineConfiguration,
    ) -> dict[FetcherID, FetcherConfiguration]: ...


class Integrator(Protocol):
    def __call__(
        self,
        engine_configuration: EngineConfiguration,
    ): ...
